/**
 * @fileoverview added by tsickle
 * Generated from: performance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';
import { EMPTY, Observable, of } from 'rxjs';
import { map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { FirebaseApp, ɵapplyMixins, ɵlazySDKProxy } from '@angular/fire';
import { isPlatformBrowser } from '@angular/common';
import { proxyPolyfillCompat } from './base';
import { ɵfetchInstance } from '@angular/fire';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
// SEMVER @ v6, drop and move core ng metrics to a service
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/fire';
export const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken('angularfire2.performance.auto_trace');
/** @type {?} */
export const INSTRUMENTATION_ENABLED = new InjectionToken('angularfire2.performance.instrumentationEnabled');
/** @type {?} */
export const DATA_COLLECTION_ENABLED = new InjectionToken('angularfire2.performance.dataCollectionEnabled');
// WARNING: interface has both a type and a value, skipping emit
export class AngularFirePerformance {
    /**
     * @param {?} app
     * @param {?} instrumentationEnabled
     * @param {?} dataCollectionEnabled
     * @param {?} zone
     * @param {?} platformId
     */
    constructor(app, instrumentationEnabled, dataCollectionEnabled, zone, 
    // tslint:disable-next-line:ban-types
    platformId) {
        this.zone = zone;
        this.performance = of(undefined).pipe(switchMap((/**
         * @return {?}
         */
        () => isPlatformBrowser(platformId) ? zone.runOutsideAngular((/**
         * @return {?}
         */
        () => import('firebase/performance'))) : EMPTY)), map((/**
         * @return {?}
         */
        () => ɵfetchInstance(`performance`, 'AngularFirePerformance', app, (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const performance = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => app.performance()));
            if (instrumentationEnabled === false) {
                performance.instrumentationEnabled = false;
            }
            if (dataCollectionEnabled === false) {
                performance.dataCollectionEnabled = false;
            }
            return performance;
        }), [instrumentationEnabled, dataCollectionEnabled]))), shareReplay({ bufferSize: 1, refCount: false }));
        return ɵlazySDKProxy(this, this.performance, zone);
    }
}
AngularFirePerformance.ɵfac = function AngularFirePerformance_Factory(t) { return new (t || AngularFirePerformance)(ɵngcc0.ɵɵinject(ɵngcc1.FirebaseApp), ɵngcc0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), ɵngcc0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
/** @nocollapse */
AngularFirePerformance.ctorParameters = () => [
    { type: FirebaseApp },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INSTRUMENTATION_ENABLED,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DATA_COLLECTION_ENABLED,] }] },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ AngularFirePerformance.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFirePerformance_Factory() { return new AngularFirePerformance(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), i0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: AngularFirePerformance, providedIn: "any" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformance, [{
        type: Injectable,
        args: [{
                providedIn: 'any'
            }]
    }], function () { return [{ type: ɵngcc1.FirebaseApp }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INSTRUMENTATION_ENABLED]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DATA_COLLECTION_ENABLED]
            }] }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.performance;
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.zone;
}
/** @type {?} */
const trace$ = (/**
 * @param {?} traceId
 * @return {?}
 */
(traceId) => {
    if (typeof window !== 'undefined' && window.performance) {
        /** @type {?} */
        const entries = window.performance.getEntriesByName(traceId, 'measure') || [];
        /** @type {?} */
        const startMarkName = `_${traceId}Start[${entries.length}]`;
        /** @type {?} */
        const endMarkName = `_${traceId}End[${entries.length}]`;
        return new Observable((/**
         * @param {?} emitter
         * @return {?}
         */
        emitter => {
            window.performance.mark(startMarkName);
            emitter.next();
            return {
                unsubscribe: (/**
                 * @return {?}
                 */
                () => {
                    window.performance.mark(endMarkName);
                    window.performance.measure(traceId, startMarkName, endMarkName);
                })
            };
        }));
    }
    else {
        return EMPTY;
    }
});
const ɵ0 = trace$;
/** @type {?} */
export const traceUntil = (/**
 * @template T
 * @param {?} name
 * @param {?} test
 * @param {?=} options
 * @return {?}
 */
(name, test, options) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @param {?} a
     * @return {?}
     */
    a => test(a) && traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => options && options.orComplete && traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceWhile = (/**
 * @template T
 * @param {?} name
 * @param {?} test
 * @param {?=} options
 * @return {?}
 */
(name, test, options) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    let traceSubscription;
    return source$.pipe(tap((/**
     * @param {?} a
     * @return {?}
     */
    a => {
        if (test(a)) {
            traceSubscription = traceSubscription || trace$(name).subscribe();
        }
        else {
            if (traceSubscription) {
                traceSubscription.unsubscribe();
            }
            traceSubscription = undefined;
        }
    }), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceUntilComplete = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceUntilFirst = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => {
    }))).subscribe(subscriber);
}))));
/** @type {?} */
export const trace = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
ɵapplyMixins(AngularFirePerformance, [proxyPolyfillCompat]);
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9wZXJmb3JtYW5jZS9wZXJmb3JtYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzNELE9BQU8sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DO0FBQ29DO0FBQ3RCO0FBQTJEOzs7QUFBekUsTUFBTSxPQUFPLG1DQUFtQyxHQUFHLElBQUksY0FBYyxDQUFVLHFDQUFxQyxDQUFDO0FBQ3JIO0FBQUEsTUFBTSxPQUFPLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUFVLGlEQUFpRCxDQUFDO0FBQ3JIO0FBQUEsTUFBTSxPQUFPLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUFVLGdEQUFnRCxDQUFDO0FBQ3BIO0FBT0EsTUFBTSxPQUFPLHNCQUFzQjtBQUNuQztBQUNPO0FBQXNCO0FBQXlDO0FBR3REO0FBQ0M7QUFBNkI7QUFBUSxJQUZwRCxZQUNFLEdBQWdCLEVBQzZCLHNCQUFzQyxFQUN0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LENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzFCLENBQUMsRUFBQyxDQUFBLENBQUE7QUFDRjtBQUNBLE1BQU0sT0FBTyxLQUFLO0FBQVE7QUFBZTtBQUFtQjtBQUFlO0FBQXRELENBQVUsSUFBWSxFQUFFLEVBQUU7QUFBTTtBQUFzQjtBQUFlO0FBQTFDLENBQUMsT0FBc0IsRUFBRSxFQUFFLENBQUMsSUFBSSxVQUFVO0FBQU07QUFDckY7QUFBZTtBQURvRSxVQUFVLENBQUMsRUFBRTtBQUMzRztBQUFxQixVQUFiLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUU7QUFDcEQsSUFBRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLEdBQUc7QUFDSDtBQUFtQjtBQUFRLElBQXpCLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRTtBQUNyQztBQUVKO0FBQVEsSUFGSixHQUFHLEVBQUU7QUFDWCxJQUFNLENBQUM7QUFDRDtBQUFtQjtBQUFRLElBQTNCLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUN0QyxDQUNGLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzFCLENBQUMsRUFBQyxDQUFBLENBQUE7QUFFRixZQUFZLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7QUFDNUQ7QUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE5nWm9uZSwgT3B0aW9uYWwsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFTVBUWSwgT2JzZXJ2YWJsZSwgb2YsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IEZpcmViYXNlQXBwLCDJtWFwcGx5TWl4aW5zLCDJtWxhenlTREtQcm94eSwgybVQcm9taXNlUHJveHkgfSBmcm9tICdAYW5ndWxhci9maXJlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IHByb3h5UG9seWZpbGxDb21wYXQgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgybVmZXRjaEluc3RhbmNlIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5cbi8vIFNFTVZFUiBAIHY2LCBkcm9wIGFuZCBtb3ZlIGNvcmUgbmcgbWV0cmljcyB0byBhIHNlcnZpY2VcbmV4cG9ydCBjb25zdCBBVVRPTUFUSUNBTExZX1RSQUNFX0NPUkVfTkdfTUVUUklDUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPignYW5ndWxhcmZpcmUyLnBlcmZvcm1hbmNlLmF1dG9fdHJhY2UnKTtcbmV4cG9ydCBjb25zdCBJTlNUUlVNRU5UQVRJT05fRU5BQkxFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPignYW5ndWxhcmZpcmUyLnBlcmZvcm1hbmNlLmluc3RydW1lbnRhdGlvbkVuYWJsZWQnKTtcbmV4cG9ydCBjb25zdCBEQVRBX0NPTExFQ1RJT05fRU5BQkxFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPignYW5ndWxhcmZpcmUyLnBlcmZvcm1hbmNlLmRhdGFDb2xsZWN0aW9uRW5hYmxlZCcpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2UgZXh0ZW5kcyDJtVByb21pc2VQcm94eTxmaXJlYmFzZS5wZXJmb3JtYW5jZS5QZXJmb3JtYW5jZT4ge1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdhbnknXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2Uge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcGVyZm9ybWFuY2U6IE9ic2VydmFibGU8ZmlyZWJhc2UucGVyZm9ybWFuY2UuUGVyZm9ybWFuY2U+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFwcDogRmlyZWJhc2VBcHAsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChJTlNUUlVNRU5UQVRJT05fRU5BQkxFRCkgaW5zdHJ1bWVudGF0aW9uRW5hYmxlZDogYm9vbGVhbiB8IG51bGwsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChEQVRBX0NPTExFQ1RJT05fRU5BQkxFRCkgZGF0YUNvbGxlY3Rpb25FbmFibGVkOiBib29sZWFuIHwgbnVsbCxcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0XG4gICkge1xuXG4gICAgdGhpcy5wZXJmb3JtYW5jZSA9IG9mKHVuZGVmaW5lZCkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiBpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSA/IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gaW1wb3J0KCdmaXJlYmFzZS9wZXJmb3JtYW5jZScpKSA6IEVNUFRZKSxcbiAgICAgIG1hcCgoKSA9PiDJtWZldGNoSW5zdGFuY2UoYHBlcmZvcm1hbmNlYCwgJ0FuZ3VsYXJGaXJlUGVyZm9ybWFuY2UnLCBhcHAsICgpID0+IHtcbiAgICAgICAgY29uc3QgcGVyZm9ybWFuY2UgPSB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGFwcC5wZXJmb3JtYW5jZSgpKTtcbiAgICAgICAgaWYgKGluc3RydW1lbnRhdGlvbkVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcGVyZm9ybWFuY2UuaW5zdHJ1bWVudGF0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhQ29sbGVjdGlvbkVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcGVyZm9ybWFuY2UuZGF0YUNvbGxlY3Rpb25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlO1xuICAgICAgfSwgW2luc3RydW1lbnRhdGlvbkVuYWJsZWQsIGRhdGFDb2xsZWN0aW9uRW5hYmxlZF0pKSxcbiAgICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IGZhbHNlIH0pXG4gICAgKTtcblxuICAgIHJldHVybiDJtWxhenlTREtQcm94eSh0aGlzLCB0aGlzLnBlcmZvcm1hbmNlLCB6b25lKTtcblxuICB9XG5cbn1cblxuY29uc3QgdHJhY2UkID0gKHRyYWNlSWQ6IHN0cmluZykgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgY29uc3QgZW50cmllcyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKHRyYWNlSWQsICdtZWFzdXJlJykgfHwgW107XG4gICAgY29uc3Qgc3RhcnRNYXJrTmFtZSA9IGBfJHt0cmFjZUlkfVN0YXJ0WyR7ZW50cmllcy5sZW5ndGh9XWA7XG4gICAgY29uc3QgZW5kTWFya05hbWUgPSBgXyR7dHJhY2VJZH1FbmRbJHtlbnRyaWVzLmxlbmd0aH1dYDtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8dm9pZD4oZW1pdHRlciA9PiB7XG4gICAgICB3aW5kb3cucGVyZm9ybWFuY2UubWFyayhzdGFydE1hcmtOYW1lKTtcbiAgICAgIGVtaXR0ZXIubmV4dCgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2UubWFyayhlbmRNYXJrTmFtZSk7XG4gICAgICAgICAgd2luZG93LnBlcmZvcm1hbmNlLm1lYXN1cmUodHJhY2VJZCwgc3RhcnRNYXJrTmFtZSwgZW5kTWFya05hbWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBFTVBUWTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRyYWNlVW50aWwgPSA8VCA9IGFueT4oXG4gIG5hbWU6IHN0cmluZyxcbiAgdGVzdDogKGE6IFQpID0+IGJvb2xlYW4sXG4gIG9wdGlvbnM/OiB7IG9yQ29tcGxldGU/OiBib29sZWFuIH1cbikgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IG5ldyBPYnNlcnZhYmxlPFQ+KHN1YnNjcmliZXIgPT4ge1xuICBjb25zdCB0cmFjZVN1YnNjcmlwdGlvbiA9IHRyYWNlJChuYW1lKS5zdWJzY3JpYmUoKTtcbiAgcmV0dXJuIHNvdXJjZSQucGlwZShcbiAgICB0YXAoXG4gICAgICBhID0+IHRlc3QoYSkgJiYgdHJhY2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSxcbiAgICAgICgpID0+IHtcbiAgICAgIH0sXG4gICAgICAoKSA9PiBvcHRpb25zICYmIG9wdGlvbnMub3JDb21wbGV0ZSAmJiB0cmFjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gICAgKVxuICApLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdHJhY2VXaGlsZSA9IDxUID0gYW55PihcbiAgbmFtZTogc3RyaW5nLFxuICB0ZXN0OiAoYTogVCkgPT4gYm9vbGVhbixcbiAgb3B0aW9ucz86IHsgb3JDb21wbGV0ZT86IGJvb2xlYW4gfVxuKSA9PiAoc291cmNlJDogT2JzZXJ2YWJsZTxUPikgPT4gbmV3IE9ic2VydmFibGU8VD4oc3Vic2NyaWJlciA9PiB7XG4gIGxldCB0cmFjZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkO1xuICByZXR1cm4gc291cmNlJC5waXBlKFxuICAgIHRhcChcbiAgICAgIGEgPT4ge1xuICAgICAgICBpZiAodGVzdChhKSkge1xuICAgICAgICAgIHRyYWNlU3Vic2NyaXB0aW9uID0gdHJhY2VTdWJzY3JpcHRpb24gfHwgdHJhY2UkKG5hbWUpLnN1YnNjcmliZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0cmFjZVN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdHJhY2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cmFjZVN1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgIH0sXG4gICAgICAoKSA9PiBvcHRpb25zICYmIG9wdGlvbnMub3JDb21wbGV0ZSAmJiB0cmFjZVN1YnNjcmlwdGlvbiAmJiB0cmFjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gICAgKVxuICApLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdHJhY2VVbnRpbENvbXBsZXRlID0gPFQgPSBhbnk+KG5hbWU6IHN0cmluZykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IG5ldyBPYnNlcnZhYmxlPFQ+KHN1YnNjcmliZXIgPT4ge1xuICBjb25zdCB0cmFjZVN1YnNjcmlwdGlvbiA9IHRyYWNlJChuYW1lKS5zdWJzY3JpYmUoKTtcbiAgcmV0dXJuIHNvdXJjZSQucGlwZShcbiAgICB0YXAoXG4gICAgICAoKSA9PiB7XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgfSxcbiAgICAgICgpID0+IHRyYWNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcbiAgICApXG4gICkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xufSk7XG5cbmV4cG9ydCBjb25zdCB0cmFjZVVudGlsRmlyc3QgPSA8VCA9IGFueT4obmFtZTogc3RyaW5nKSA9PiAoc291cmNlJDogT2JzZXJ2YWJsZTxUPikgPT4gbmV3IE9ic2VydmFibGU8VD4oc3Vic2NyaWJlciA9PiB7XG4gIGNvbnN0IHRyYWNlU3Vic2NyaXB0aW9uID0gdHJhY2UkKG5hbWUpLnN1YnNjcmliZSgpO1xuICByZXR1cm4gc291cmNlJC5waXBlKFxuICAgIHRhcChcbiAgICAgICgpID0+IHRyYWNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCksXG4gICAgICAoKSA9PiB7XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgfVxuICAgIClcbiAgKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG59KTtcblxuZXhwb3J0IGNvbnN0IHRyYWNlID0gPFQgPSBhbnk+KG5hbWU6IHN0cmluZykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IG5ldyBPYnNlcnZhYmxlPFQ+KHN1YnNjcmliZXIgPT4ge1xuICBjb25zdCB0cmFjZVN1YnNjcmlwdGlvbiA9IHRyYWNlJChuYW1lKS5zdWJzY3JpYmUoKTtcbiAgcmV0dXJuIHNvdXJjZSQucGlwZShcbiAgICB0YXAoXG4gICAgICAoKSA9PiB0cmFjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpLFxuICAgICAgKCkgPT4ge1xuICAgICAgfSxcbiAgICAgICgpID0+IHRyYWNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcbiAgICApXG4gICkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xufSk7XG5cbsm1YXBwbHlNaXhpbnMoQW5ndWxhckZpcmVQZXJmb3JtYW5jZSwgW3Byb3h5UG9seWZpbGxDb21wYXRdKTtcbiJdfQ==