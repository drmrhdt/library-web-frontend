/**
 * @fileoverview added by tsickle
 * Generated from: auth.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional, NgZone, PLATFORM_ID, InjectionToken } from '@angular/core';
import { Observable, of, from, merge, Subject } from 'rxjs';
import { switchMap, map, observeOn, shareReplay, first, filter, switchMapTo, subscribeOn } from 'rxjs/operators';
import { FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵlazySDKProxy, ɵfirebaseAppFactory, ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵapplyMixins } from '@angular/fire';
import { isPlatformServer } from '@angular/common';
import { proxyPolyfillCompat } from './base';
import { ɵfetchInstance } from '@angular/fire';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
// WARNING: interface has both a type and a value, skipping emit
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
export const USE_EMULATOR = new InjectionToken('angularfire2.auth.use-emulator');
/** @type {?} */
export const SETTINGS = new InjectionToken('angularfire2.auth.settings');
/** @type {?} */
export const TENANT_ID = new InjectionToken('angularfire2.auth.tenant-id');
/** @type {?} */
export const LANGUAGE_CODE = new InjectionToken('angularfire2.auth.langugage-code');
/** @type {?} */
export const USE_DEVICE_LANGUAGE = new InjectionToken('angularfire2.auth.use-device-language');
/** @type {?} */
export const PERSISTENCE = new InjectionToken('angularfire.auth.persistence');
export class AngularFireAuth {
    /**
     * @param {?} options
     * @param {?} nameOrConfig
     * @param {?} platformId
     * @param {?} zone
     * @param {?} _useEmulator
     * @param {?} _settings
     * @param {?} tenantId
     * @param {?} languageCode
     * @param {?} useDeviceLanguage
     * @param {?} persistence
     */
    constructor(options, nameOrConfig, 
    // tslint:disable-next-line:ban-types
    platformId, zone, _useEmulator, // can't use the tuple here
    _settings, // can't use firebase.auth.AuthSettings here
    tenantId, languageCode, useDeviceLanguage, persistence) {
        /** @type {?} */
        const schedulers = new ɵAngularFireSchedulers(zone);
        /** @type {?} */
        const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);
        /** @type {?} */
        const logins = new Subject();
        /** @type {?} */
        const auth = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap((/**
         * @return {?}
         */
        () => zone.runOutsideAngular((/**
         * @return {?}
         */
        () => import('firebase/auth'))))), map((/**
         * @return {?}
         */
        () => ɵfirebaseAppFactory(options, zone, nameOrConfig))), map((/**
         * @param {?} app
         * @return {?}
         */
        app => zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const useEmulator = _useEmulator;
            /** @type {?} */
            const settings = _settings;
            return ɵfetchInstance(`${app.name}.auth`, 'AngularFireAuth', app, (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const auth = zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => app.auth()));
                if (useEmulator) {
                    // Firebase Auth doesn't conform to the useEmulator convention, let's smooth that over
                    auth.useEmulator(`http://${useEmulator.join(':')}`);
                }
                if (tenantId) {
                    auth.tenantId = tenantId;
                }
                auth.languageCode = languageCode;
                if (useDeviceLanguage) {
                    auth.useDeviceLanguage();
                }
                if (settings) {
                    auth.settings = settings;
                }
                if (persistence) {
                    auth.setPersistence(persistence);
                }
                return auth;
            }), [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);
        })))), shareReplay({ bufferSize: 1, refCount: false }));
        if (isPlatformServer(platformId)) {
            this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);
        }
        else {
            // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth
            //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly
            //       as we're completely lazy. Let's eagerly load the Auth SDK here.
            //       There could potentially be race conditions still... but this greatly decreases the odds while
            //       we reevaluate the API.
            /** @type {?} */
            const _ = auth.pipe(first()).subscribe();
            /** @type {?} */
            const redirectResult = auth.pipe(switchMap((/**
             * @param {?} auth
             * @return {?}
             */
            auth => auth.getRedirectResult().then((/**
             * @param {?} it
             * @return {?}
             */
            it => it), (/**
             * @return {?}
             */
            () => null)))), keepUnstableUntilFirst, shareReplay({ bufferSize: 1, refCount: false }));
            /** @type {?} */
            const fromCallback = (/**
             * @template T
             * @param {?} cb
             * @return {?}
             */
            (cb) => new Observable((/**
             * @param {?} subscriber
             * @return {?}
             */
            subscriber => ({ unsubscribe: zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => cb(subscriber))) }))));
            /** @type {?} */
            const authStateChanged = auth.pipe(switchMap((/**
             * @param {?} auth
             * @return {?}
             */
            auth => fromCallback(auth.onAuthStateChanged.bind(auth)))));
            /** @type {?} */
            const idTokenChanged = auth.pipe(switchMap((/**
             * @param {?} auth
             * @return {?}
             */
            auth => fromCallback(auth.onIdTokenChanged.bind(auth)))));
            this.authState = redirectResult.pipe(switchMapTo(authStateChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));
            this.user = redirectResult.pipe(switchMapTo(idTokenChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));
            this.idToken = this.user.pipe(switchMap((/**
             * @param {?} user
             * @return {?}
             */
            user => user ? from(user.getIdToken()) : of(null))));
            this.idTokenResult = this.user.pipe(switchMap((/**
             * @param {?} user
             * @return {?}
             */
            user => user ? from(user.getIdTokenResult()) : of(null))));
            this.credential = merge(redirectResult, logins, 
            // pipe in null authState to make credential zipable, just a weird devexp if
            // authState and user go null to still have a credential
            this.authState.pipe(filter((/**
             * @param {?} it
             * @return {?}
             */
            it => !it)))).pipe(
            // handle the { user: { } } when a user is already logged in, rather have null
            // TODO handle the type corcersion better
            map((/**
             * @param {?} credential
             * @return {?}
             */
            credential => (credential === null || credential === void 0 ? void 0 : credential.user) ? (/** @type {?} */ (credential)) : null)), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));
        }
        return ɵlazySDKProxy(this, auth, zone, { spy: {
                apply: (/**
                 * @param {?} name
                 * @param {?} _
                 * @param {?} val
                 * @return {?}
                 */
                (name, _, val) => {
                    // If they call a signIn or createUser function listen into the promise
                    // this will give us the user credential, push onto the logins Subject
                    // to be consumed in .credential
                    if (name.startsWith('signIn') || name.startsWith('createUser')) {
                        // TODO fix the types, the trouble is UserCredential has everything optional
                        val.then((/**
                         * @param {?} user
                         * @return {?}
                         */
                        (user) => logins.next((/** @type {?} */ (user)))));
                    }
                })
            } });
    }
}
AngularFireAuth.ɵfac = function AngularFireAuth_Factory(t) { return new (t || AngularFireAuth)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(USE_EMULATOR, 8), ɵngcc0.ɵɵinject(SETTINGS, 8), ɵngcc0.ɵɵinject(TENANT_ID, 8), ɵngcc0.ɵɵinject(LANGUAGE_CODE, 8), ɵngcc0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), ɵngcc0.ɵɵinject(PERSISTENCE, 8)); };
/** @nocollapse */
AngularFireAuth.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_EMULATOR,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SETTINGS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TENANT_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LANGUAGE_CODE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [USE_DEVICE_LANGUAGE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PERSISTENCE,] }] }
];
/** @nocollapse */ AngularFireAuth.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFireAuth_Factory() { return new AngularFireAuth(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8)); }, token: AngularFireAuth, providedIn: "any" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireAuth, [{
        type: Injectable,
        args: [{
                providedIn: 'any'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [FIREBASE_OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [FIREBASE_APP_NAME]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [USE_EMULATOR]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SETTINGS]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TENANT_ID]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LANGUAGE_CODE]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [USE_DEVICE_LANGUAGE]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [PERSISTENCE]
            }] }]; }, null); })();
if (false) {
    /**
     * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out
     * @type {?}
     */
    AngularFireAuth.prototype.authState;
    /**
     * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).
     * @type {?}
     */
    AngularFireAuth.prototype.idToken;
    /**
     * Observable of the currently signed-in user (or null).
     * @type {?}
     */
    AngularFireAuth.prototype.user;
    /**
     * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other
     * helper properties for getting different data associated with the token as well as all the decoded payload claims
     * (or null).
     * @type {?}
     */
    AngularFireAuth.prototype.idTokenResult;
    /**
     * Observable of the currently signed-in user's credential, or null
     * @type {?}
     */
    AngularFireAuth.prototype.credential;
}
ɵapplyMixins(AngularFireAuth, [proxyPolyfillCompat]);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcnVubmVyL3dvcmsvYW5ndWxhcmZpcmUvYW5ndWxhcmZpcmUvc3JjL2F1dGgvYXV0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN4RSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pILE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBSWpCLGFBQWEsRUFDYixtQkFBbUIsRUFDbkIsc0JBQXNCLEVBQ3RCLDhCQUE4QixFQUM5QixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0M7QUFDb0M7QUFBcUM7QUFHNUQ7O0FBQWIsTUFBTSxPQUFPLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBdUIsZ0NBQWdDLENBQUM7QUFDdEc7QUFDQSxNQUFNLE9BQU8sUUFBUSxHQUFHLElBQUksY0FBYyxDQUE2Qiw0QkFBNEIsQ0FBQztBQUNwRztBQUFBLE1BQU0sT0FBTyxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQVMsNkJBQTZCLENBQUM7QUFDbEY7QUFBQSxNQUFNLE9BQU8s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ekMsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7QUFBUyw0Q0FDL0MsUUFBUSxZQUFJLE1BQU0sU0FBQyxXQUFXO0FBQVE7QUFBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBVWQ7QUFBQztBQUFhO0FBQ3hDO0FBQzhCO0FBQWlCO0FBQVEsSUEvQzNELG9DQUEwRDtBQUM1RDtBQUVDO0FBQ0U7QUFDVztBQUFRLElBQXBCLGtDQUFpRDtBQUNuRDtBQUVDO0FBQ0U7QUFDVztBQUFRLElBQXBCLCtCQUFxRDtBQUN2RDtBQUVDO0FBQ0U7QUFDRTtBQUVKO0FBQWlCO0FBQVEsSUFBeEIsd0NBQTRFO0FBQzlFO0FBRUM7QUFDRTtBQUNXO0FBQVEsSUFBcEIscUNBQW9GO0FBQ3RGO0FBcUlBLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7QUFDckQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsLCBOZ1pvbmUsIFBMQVRGT1JNX0lELCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGZyb20sIG1lcmdlLCBTdWJqZWN0LCBTdWJzY3JpYmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIG1hcCwgb2JzZXJ2ZU9uLCBzaGFyZVJlcGxheSwgZmlyc3QsIGZpbHRlciwgc3dpdGNoTWFwVG8sIHN1YnNjcmliZU9uIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgRklSRUJBU0VfT1BUSU9OUyxcbiAgRklSRUJBU0VfQVBQX05BTUUsXG4gIEZpcmViYXNlT3B0aW9ucyxcbiAgRmlyZWJhc2VBcHBDb25maWcsXG4gIMm1UHJvbWlzZVByb3h5LFxuICDJtWxhenlTREtQcm94eSxcbiAgybVmaXJlYmFzZUFwcEZhY3RvcnksXG4gIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzLFxuICDJtWtlZXBVbnN0YWJsZVVudGlsRmlyc3RGYWN0b3J5LFxuICDJtWFwcGx5TWl4aW5zXG59IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IHByb3h5UG9seWZpbGxDb21wYXQgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgybVmZXRjaEluc3RhbmNlIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5ndWxhckZpcmVBdXRoIGV4dGVuZHMgybVQcm9taXNlUHJveHk8ZmlyZWJhc2UuYXV0aC5BdXRoPiB7fVxuXG50eXBlIFVzZUVtdWxhdG9yQXJndW1lbnRzID0gW3N0cmluZywgbnVtYmVyXTtcbmV4cG9ydCBjb25zdCBVU0VfRU1VTEFUT1IgPSBuZXcgSW5qZWN0aW9uVG9rZW48VXNlRW11bGF0b3JBcmd1bWVudHM+KCdhbmd1bGFyZmlyZTIuYXV0aC51c2UtZW11bGF0b3InKTtcblxuZXhwb3J0IGNvbnN0IFNFVFRJTkdTID0gbmV3IEluamVjdGlvblRva2VuPGZpcmViYXNlLmF1dGguQXV0aFNldHRpbmdzPignYW5ndWxhcmZpcmUyLmF1dGguc2V0dGluZ3MnKTtcbmV4cG9ydCBjb25zdCBURU5BTlRfSUQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignYW5ndWxhcmZpcmUyLmF1dGgudGVuYW50LWlkJyk7XG5leHBvcnQgY29uc3QgTEFOR1VBR0VfQ09ERSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdhbmd1bGFyZmlyZTIuYXV0aC5sYW5ndWdhZ2UtY29kZScpO1xuZXhwb3J0IGNvbnN0IFVTRV9ERVZJQ0VfTEFOR1VBR0UgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oJ2FuZ3VsYXJmaXJlMi5hdXRoLnVzZS1kZXZpY2UtbGFuZ3VhZ2UnKTtcbmV4cG9ydCBjb25zdCBQRVJTSVNURU5DRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdhbmd1bGFyZmlyZS5hdXRoLnBlcnNpc3RlbmNlJyk7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ2FueSdcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZpcmVBdXRoIHtcblxuICAvKipcbiAgICogT2JzZXJ2YWJsZSBvZiBhdXRoZW50aWNhdGlvbiBzdGF0ZTsgYXMgb2YgRmlyZWJhc2UgNC4wIHRoaXMgaXMgb25seSB0cmlnZ2VyZWQgdmlhIHNpZ24taW4vb3V0XG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgYXV0aFN0YXRlOiBPYnNlcnZhYmxlPGZpcmViYXNlLlVzZXJ8bnVsbD47XG5cbiAgLyoqXG4gICAqIE9ic2VydmFibGUgb2YgdGhlIGN1cnJlbnRseSBzaWduZWQtaW4gdXNlcidzIEpXVCB0b2tlbiB1c2VkIHRvIGlkZW50aWZ5IHRoZSB1c2VyIHRvIGEgRmlyZWJhc2Ugc2VydmljZSAob3IgbnVsbCkuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgaWRUb2tlbjogT2JzZXJ2YWJsZTxzdHJpbmd8bnVsbD47XG5cbiAgLyoqXG4gICAqIE9ic2VydmFibGUgb2YgdGhlIGN1cnJlbnRseSBzaWduZWQtaW4gdXNlciAob3IgbnVsbCkuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgdXNlcjogT2JzZXJ2YWJsZTxmaXJlYmFzZS5Vc2VyfG51bGw+O1xuXG4gIC8qKlxuICAgKiBPYnNlcnZhYmxlIG9mIHRoZSBjdXJyZW50bHkgc2lnbmVkLWluIHVzZXIncyBJZFRva2VuUmVzdWx0IG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgSUQgdG9rZW4gSldUIHN0cmluZyBhbmQgb3RoZXJcbiAgICogaGVscGVyIHByb3BlcnRpZXMgZm9yIGdldHRpbmcgZGlmZmVyZW50IGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSB0b2tlbiBhcyB3ZWxsIGFzIGFsbCB0aGUgZGVjb2RlZCBwYXlsb2FkIGNsYWltc1xuICAgKiAob3IgbnVsbCkuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgaWRUb2tlblJlc3VsdDogT2JzZXJ2YWJsZTxmaXJlYmFzZS5hdXRoLklkVG9rZW5SZXN1bHR8bnVsbD47XG5cbiAgLyoqXG4gICAqIE9ic2VydmFibGUgb2YgdGhlIGN1cnJlbnRseSBzaWduZWQtaW4gdXNlcidzIGNyZWRlbnRpYWwsIG9yIG51bGxcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBjcmVkZW50aWFsOiBPYnNlcnZhYmxlPFJlcXVpcmVkPGZpcmViYXNlLmF1dGguVXNlckNyZWRlbnRpYWw+fG51bGw+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoRklSRUJBU0VfT1BUSU9OUykgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRklSRUJBU0VfQVBQX05BTUUpIG5hbWVPckNvbmZpZzogc3RyaW5nfEZpcmViYXNlQXBwQ29uZmlnfG51bGx8dW5kZWZpbmVkLFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHlwZXNcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgem9uZTogTmdab25lLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoVVNFX0VNVUxBVE9SKSBfdXNlRW11bGF0b3I6IGFueSwgLy8gY2FuJ3QgdXNlIHRoZSB0dXBsZSBoZXJlXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChTRVRUSU5HUykgX3NldHRpbmdzOiBhbnksIC8vIGNhbid0IHVzZSBmaXJlYmFzZS5hdXRoLkF1dGhTZXR0aW5ncyBoZXJlXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChURU5BTlRfSUQpIHRlbmFudElkOiBzdHJpbmcgfCBudWxsLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTEFOR1VBR0VfQ09ERSkgbGFuZ3VhZ2VDb2RlOiBzdHJpbmcgfCBudWxsLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoVVNFX0RFVklDRV9MQU5HVUFHRSkgdXNlRGV2aWNlTGFuZ3VhZ2U6IGJvb2xlYW4gfCBudWxsLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUEVSU0lTVEVOQ0UpIHBlcnNpc3RlbmNlOiBzdHJpbmcgfCBudWxsLFxuICApIHtcbiAgICBjb25zdCBzY2hlZHVsZXJzID0gbmV3IMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzKHpvbmUpO1xuICAgIGNvbnN0IGtlZXBVbnN0YWJsZVVudGlsRmlyc3QgPSDJtWtlZXBVbnN0YWJsZVVudGlsRmlyc3RGYWN0b3J5KHNjaGVkdWxlcnMpO1xuICAgIGNvbnN0IGxvZ2lucyA9IG5ldyBTdWJqZWN0PFJlcXVpcmVkPGZpcmViYXNlLmF1dGguVXNlckNyZWRlbnRpYWw+PigpO1xuXG4gICAgY29uc3QgYXV0aCA9IG9mKHVuZGVmaW5lZCkucGlwZShcbiAgICAgIG9ic2VydmVPbihzY2hlZHVsZXJzLm91dHNpZGVBbmd1bGFyKSxcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGltcG9ydCgnZmlyZWJhc2UvYXV0aCcpKSksXG4gICAgICBtYXAoKCkgPT4gybVmaXJlYmFzZUFwcEZhY3Rvcnkob3B0aW9ucywgem9uZSwgbmFtZU9yQ29uZmlnKSksXG4gICAgICBtYXAoYXBwID0+IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VFbXVsYXRvcjogVXNlRW11bGF0b3JBcmd1bWVudHMgfCBudWxsID0gX3VzZUVtdWxhdG9yO1xuICAgICAgICBjb25zdCBzZXR0aW5nczogZmlyZWJhc2UuYXV0aC5BdXRoU2V0dGluZ3MgfCBudWxsID0gX3NldHRpbmdzO1xuICAgICAgICByZXR1cm4gybVmZXRjaEluc3RhbmNlKGAke2FwcC5uYW1lfS5hdXRoYCwgJ0FuZ3VsYXJGaXJlQXV0aCcsIGFwcCwgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1dGggPSB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGFwcC5hdXRoKCkpO1xuICAgICAgICAgIGlmICh1c2VFbXVsYXRvcikge1xuICAgICAgICAgICAgLy8gRmlyZWJhc2UgQXV0aCBkb2Vzbid0IGNvbmZvcm0gdG8gdGhlIHVzZUVtdWxhdG9yIGNvbnZlbnRpb24sIGxldCdzIHNtb290aCB0aGF0IG92ZXJcbiAgICAgICAgICAgIGF1dGgudXNlRW11bGF0b3IoYGh0dHA6Ly8ke3VzZUVtdWxhdG9yLmpvaW4oJzonKX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRlbmFudElkKSB7XG4gICAgICAgICAgICBhdXRoLnRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF1dGgubGFuZ3VhZ2VDb2RlID0gbGFuZ3VhZ2VDb2RlO1xuICAgICAgICAgIGlmICh1c2VEZXZpY2VMYW5ndWFnZSkge1xuICAgICAgICAgICAgYXV0aC51c2VEZXZpY2VMYW5ndWFnZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIGF1dGguc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBlcnNpc3RlbmNlKSB7XG4gICAgICAgICAgICBhdXRoLnNldFBlcnNpc3RlbmNlKHBlcnNpc3RlbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGF1dGg7XG4gICAgICAgIH0sIFt1c2VFbXVsYXRvciwgdGVuYW50SWQsIGxhbmd1YWdlQ29kZSwgdXNlRGV2aWNlTGFuZ3VhZ2UsIHNldHRpbmdzLCBwZXJzaXN0ZW5jZV0pO1xuICAgICAgfSkpLFxuICAgICAgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogZmFsc2UgfSksXG4gICAgKTtcblxuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XG5cbiAgICAgIHRoaXMuYXV0aFN0YXRlID0gdGhpcy51c2VyID0gdGhpcy5pZFRva2VuID0gdGhpcy5pZFRva2VuUmVzdWx0ID0gdGhpcy5jcmVkZW50aWFsID0gb2YobnVsbCk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBIQUNLLCBhcyB3ZSdyZSBleHBvcnRpbmcgYXV0aC5BdXRoLCByYXRoZXIgdGhhbiBhdXRoLCBkZXZlbG9wZXJzIGltcG9ydGluZyBmaXJlYmFzZS5hdXRoXG4gICAgICAvLyAgICAgICAoZS5nLCBgaW1wb3J0IHsgYXV0aCB9IGZyb20gJ2ZpcmViYXNlL2FwcCdgKSBhcmUgZ2V0dGluZyBhbiB1bmRlZmluZWQgYXV0aCBvYmplY3QgdW5leHBlY3RlZGx5XG4gICAgICAvLyAgICAgICBhcyB3ZSdyZSBjb21wbGV0ZWx5IGxhenkuIExldCdzIGVhZ2VybHkgbG9hZCB0aGUgQXV0aCBTREsgaGVyZS5cbiAgICAgIC8vICAgICAgIFRoZXJlIGNvdWxkIHBvdGVudGlhbGx5IGJlIHJhY2UgY29uZGl0aW9ucyBzdGlsbC4uLiBidXQgdGhpcyBncmVhdGx5IGRlY3JlYXNlcyB0aGUgb2RkcyB3aGlsZVxuICAgICAgLy8gICAgICAgd2UgcmVldmFsdWF0ZSB0aGUgQVBJLlxuICAgICAgY29uc3QgXyA9IGF1dGgucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoKTtcblxuICAgICAgY29uc3QgcmVkaXJlY3RSZXN1bHQgPSBhdXRoLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcChhdXRoID0+IGF1dGguZ2V0UmVkaXJlY3RSZXN1bHQoKS50aGVuKGl0ID0+IGl0LCAoKSA9PiBudWxsKSksXG4gICAgICAgIGtlZXBVbnN0YWJsZVVudGlsRmlyc3QsXG4gICAgICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IGZhbHNlIH0pLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgZnJvbUNhbGxiYWNrID0gPFQgPSBhbnk+KGNiOiAoc3ViOiBTdWJzY3JpYmVyPFQ+KSA9PiAoKSA9PiB2b2lkKSA9PiBuZXcgT2JzZXJ2YWJsZTxUPihzdWJzY3JpYmVyID0+XG4gICAgICAgICh7IHVuc3Vic2NyaWJlOiB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGNiKHN1YnNjcmliZXIpKSB9KVxuICAgICAgKTtcblxuICAgICAgY29uc3QgYXV0aFN0YXRlQ2hhbmdlZCA9IGF1dGgucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKGF1dGggPT4gZnJvbUNhbGxiYWNrKGF1dGgub25BdXRoU3RhdGVDaGFuZ2VkLmJpbmQoYXV0aCkpKSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGlkVG9rZW5DaGFuZ2VkID0gYXV0aC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoYXV0aCA9PiBmcm9tQ2FsbGJhY2soYXV0aC5vbklkVG9rZW5DaGFuZ2VkLmJpbmQoYXV0aCkpKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5hdXRoU3RhdGUgPSByZWRpcmVjdFJlc3VsdC5waXBlKFxuICAgICAgICBzd2l0Y2hNYXBUbyhhdXRoU3RhdGVDaGFuZ2VkKSxcbiAgICAgICAgc3Vic2NyaWJlT24oc2NoZWR1bGVycy5vdXRzaWRlQW5ndWxhciksXG4gICAgICAgIG9ic2VydmVPbihzY2hlZHVsZXJzLmluc2lkZUFuZ3VsYXIpLFxuICAgICAgKTtcblxuICAgICAgdGhpcy51c2VyID0gcmVkaXJlY3RSZXN1bHQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwVG8oaWRUb2tlbkNoYW5nZWQpLFxuICAgICAgICBzdWJzY3JpYmVPbihzY2hlZHVsZXJzLm91dHNpZGVBbmd1bGFyKSxcbiAgICAgICAgb2JzZXJ2ZU9uKHNjaGVkdWxlcnMuaW5zaWRlQW5ndWxhciksXG4gICAgICApO1xuXG4gICAgICB0aGlzLmlkVG9rZW4gPSB0aGlzLnVzZXIucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKHVzZXIgPT4gdXNlciA/IGZyb20odXNlci5nZXRJZFRva2VuKCkpIDogb2YobnVsbCkpXG4gICAgICApO1xuXG4gICAgICB0aGlzLmlkVG9rZW5SZXN1bHQgPSB0aGlzLnVzZXIucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKHVzZXIgPT4gdXNlciA/IGZyb20odXNlci5nZXRJZFRva2VuUmVzdWx0KCkpIDogb2YobnVsbCkpXG4gICAgICApO1xuXG4gICAgICB0aGlzLmNyZWRlbnRpYWwgPSBtZXJnZShcbiAgICAgICAgcmVkaXJlY3RSZXN1bHQsXG4gICAgICAgIGxvZ2lucyxcbiAgICAgICAgLy8gcGlwZSBpbiBudWxsIGF1dGhTdGF0ZSB0byBtYWtlIGNyZWRlbnRpYWwgemlwYWJsZSwganVzdCBhIHdlaXJkIGRldmV4cCBpZlxuICAgICAgICAvLyBhdXRoU3RhdGUgYW5kIHVzZXIgZ28gbnVsbCB0byBzdGlsbCBoYXZlIGEgY3JlZGVudGlhbFxuICAgICAgICB0aGlzLmF1dGhTdGF0ZS5waXBlKGZpbHRlcihpdCA9PiAhaXQpKVxuICAgICAgKS5waXBlKFxuICAgICAgICAvLyBoYW5kbGUgdGhlIHsgdXNlcjogeyB9IH0gd2hlbiBhIHVzZXIgaXMgYWxyZWFkeSBsb2dnZWQgaW4sIHJhdGhlciBoYXZlIG51bGxcbiAgICAgICAgLy8gVE9ETyBoYW5kbGUgdGhlIHR5cGUgY29yY2Vyc2lvbiBiZXR0ZXJcbiAgICAgICAgbWFwKGNyZWRlbnRpYWwgPT4gY3JlZGVudGlhbD8udXNlciA/IGNyZWRlbnRpYWwgYXMgUmVxdWlyZWQ8ZmlyZWJhc2UuYXV0aC5Vc2VyQ3JlZGVudGlhbD4gOiBudWxsKSxcbiAgICAgICAgc3Vic2NyaWJlT24oc2NoZWR1bGVycy5vdXRzaWRlQW5ndWxhciksXG4gICAgICAgIG9ic2VydmVPbihzY2hlZHVsZXJzLmluc2lkZUFuZ3VsYXIpLFxuICAgICAgKTtcblxuICAgIH1cblxuICAgIHJldHVybiDJtWxhenlTREtQcm94eSh0aGlzLCBhdXRoLCB6b25lLCB7IHNweToge1xuICAgICAgYXBwbHk6IChuYW1lLCBfLCB2YWwpID0+IHtcbiAgICAgICAgLy8gSWYgdGhleSBjYWxsIGEgc2lnbkluIG9yIGNyZWF0ZVVzZXIgZnVuY3Rpb24gbGlzdGVuIGludG8gdGhlIHByb21pc2VcbiAgICAgICAgLy8gdGhpcyB3aWxsIGdpdmUgdXMgdGhlIHVzZXIgY3JlZGVudGlhbCwgcHVzaCBvbnRvIHRoZSBsb2dpbnMgU3ViamVjdFxuICAgICAgICAvLyB0byBiZSBjb25zdW1lZCBpbiAuY3JlZGVudGlhbFxuICAgICAgICBpZiAobmFtZS5zdGFydHNXaXRoKCdzaWduSW4nKSB8fCBuYW1lLnN0YXJ0c1dpdGgoJ2NyZWF0ZVVzZXInKSkge1xuICAgICAgICAgIC8vIFRPRE8gZml4IHRoZSB0eXBlcywgdGhlIHRyb3VibGUgaXMgVXNlckNyZWRlbnRpYWwgaGFzIGV2ZXJ5dGhpbmcgb3B0aW9uYWxcbiAgICAgICAgICB2YWwudGhlbigodXNlcjogZmlyZWJhc2UuYXV0aC5Vc2VyQ3JlZGVudGlhbCkgPT4gbG9naW5zLm5leHQodXNlciBhcyBhbnkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH19KTtcblxuICB9XG5cbn1cblxuybVhcHBseU1peGlucyhBbmd1bGFyRmlyZUF1dGgsIFtwcm94eVBvbHlmaWxsQ29tcGF0XSk7XG4iXX0=